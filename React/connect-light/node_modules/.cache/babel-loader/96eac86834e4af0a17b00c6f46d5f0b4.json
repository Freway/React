{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sandbox_Monteiro\\\\Nova pasta\\\\connect-light\\\\src\\\\AutoComplete.js\";\n// Imports\nimport React, { Component } from \"react\"; // Import Search Bar Components\n\nimport { Form } from \"react-bootstrap\";\n\nclass Search extends Component {\n  // Define Constructor\n  constructor(props) {\n    super(props); // Declare State\n\n    this.state = {\n      city: \"\",\n      query: \"\"\n    }; // Bind Functions\n\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this);\n  }\n\n  componentDidMount() {\n    var options = {\n      types: [\"address\"]\n    }; // To disable any eslint 'google not defined' errors\n    // Initialize Google Autocomplete\n\n    /*global google*/\n\n    this.autocomplete = new google.maps.places.Autocomplete(document.getElementById(this.props.id), options); // Fire Event when a suggested name is selected\n\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect);\n  }\n\n  handlePlaceSelect() {\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n    let address = addressObject.address_components; // Check if address is valid\n\n    if (address) {\n      // Set State\n      this.setState({\n        city: address[0].long_name,\n        query: addressObject.formatted_address,\n        lat: addressObject.geometry.location.lat(),\n        long: addressObject.geometry.location.lng()\n      }); //this.props.handleSelect(addressObject);\n    }\n  }\n\n  render() {\n    return React.createElement(Form.Control, {\n      id: this.props.id,\n      required: true,\n      placeholder: this.props.placeholder,\n      ref: this.props.ref,\n      value: (this.state.lat, this.state.lng),\n      onChange: e => this.setState({\n        query: e.target.value\n      }),\n      style: {\n        width: \"600px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["C:\\Sandbox_Monteiro\\Nova pasta\\connect-light\\src\\AutoComplete.js"],"names":["React","Component","Form","Search","constructor","props","state","city","query","handlePlaceSelect","bind","componentDidMount","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","id","addListener","addressObject","getPlace","address","address_components","setState","long_name","formatted_address","lat","geometry","location","long","lng","render","placeholder","ref","e","target","value","width"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAC7B;AACAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb,CAJiB,CAQjB;;AAEA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG;AACZC,MAAAA,KAAK,EAAE,CAAC,SAAD;AADK,KAAd,CADkB,CAGf;AAEH;;AACA;;AAEA,SAAKC,YAAL,GAAoB,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAClBC,QAAQ,CAACC,cAAT,CAAwB,KAAKf,KAAL,CAAWgB,EAAnC,CADkB,EAElBT,OAFkB,CAApB,CARkB,CAalB;;AACA,SAAKE,YAAL,CAAkBQ,WAAlB,CAA8B,eAA9B,EAA+C,KAAKb,iBAApD;AACD;;AAEDA,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIc,aAAa,GAAG,KAAKT,YAAL,CAAkBU,QAAlB,EAApB;AAIA,QAAIC,OAAO,GAAGF,aAAa,CAACG,kBAA5B,CANkB,CAQlB;;AACA,QAAID,OAAJ,EAAa;AACX;AACA,WAAKE,QAAL,CAAc;AACZpB,QAAAA,IAAI,EAAEkB,OAAO,CAAC,CAAD,CAAP,CAAWG,SADL;AAEZpB,QAAAA,KAAK,EAAEe,aAAa,CAACM,iBAFT;AAGZC,QAAAA,GAAG,EAAEP,aAAa,CAACQ,QAAd,CAAuBC,QAAvB,CAAgCF,GAAhC,EAHO;AAIZG,QAAAA,IAAI,EAAEV,aAAa,CAACQ,QAAd,CAAuBC,QAAvB,CAAgCE,GAAhC;AAJM,OAAd,EAFW,CASX;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD,CAAM,OAAN;AACA,MAAA,EAAE,EAAE,KAAK9B,KAAL,CAAWgB,EADf;AAEA,MAAA,QAAQ,MAFR;AAGA,MAAA,WAAW,EAAE,KAAKhB,KAAL,CAAW+B,WAHxB;AAIA,MAAA,GAAG,EAAE,KAAK/B,KAAL,CAAWgC,GAJhB;AAKA,MAAA,KAAK,GAAE,KAAK/B,KAAL,CAAWwB,GAAX,EAAe,KAAKxB,KAAL,CAAW4B,GAA5B,CALL;AAMA,MAAA,QAAQ,EAAEI,CAAC,IAAI,KAAKX,QAAL,CAAc;AAAEnB,QAAAA,KAAK,EAAE8B,CAAC,CAACC,MAAF,CAASC;AAAlB,OAAd,CANf;AAOA,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK;AAAN,OAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AAlE4B;;AAsE/B,eAAetC,MAAf","sourcesContent":["// Imports\nimport React, { Component } from \"react\";\n\n// Import Search Bar Components\nimport { Form } from \"react-bootstrap\";\n\nclass Search extends Component {\n  // Define Constructor\n  constructor(props) {\n    super(props);\n\n    // Declare State\n    this.state = {\n      city: \"\",\n      query: \"\"\n    };\n    // Bind Functions\n\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this);\n  }\n\n  componentDidMount() {\n    var options = {\n      types: [\"address\"]\n    }; // To disable any eslint 'google not defined' errors\n\n    // Initialize Google Autocomplete\n    /*global google*/\n\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.props.id),\n      options\n    );\n\n    // Fire Event when a suggested name is selected\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect);\n  }\n\n  handlePlaceSelect() {\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n\n    \n\n    let address = addressObject.address_components;\n\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState({\n        city: address[0].long_name,\n        query: addressObject.formatted_address,\n        lat: addressObject.geometry.location.lat(),\n        long: addressObject.geometry.location.lng()\n      });\n\n      //this.props.handleSelect(addressObject);\n    }\n  }\n\n  render() {\n    return (           \n      <Form.Control\n      id={this.props.id}\n      required\n      placeholder={this.props.placeholder}      \n      ref={this.props.ref}          \n      value={this.state.lat,this.state.lng}                             \n      onChange={e => this.setState({ query: e.target.value })}\n      style={{width: `600px`}}\n      />\n    );\n  }\n}\n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}