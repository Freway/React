{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formStyles","width","height","margin","headerStyles","color","mapStyles","top","left","border","MapContainer","props","toggleButtonState","optionText","current","value","textInput","trim","alert","doPositioning","displayDriver","option","handleClose","GetEndpoint","getPosition","then","response","success","data","length","fetch","lat","long","appSettings","apiKey","json","responseJson","address1","results","formatted_address","setState","posx","result","posy","placa","licencePlate","hour","rowReferenceTime","address","optionChange","showSearchName","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","isOpen","handleShow","getDrivers","drivers","React","createRef","bind","state","Moment","locale","style","InputGroup","className","class","id","ref","this","onChange","selected","FormControl","aria-describedby","placeholder","Button","onClick","variant","hidden","google","zoom","initialCenter","lng","center","position","visible","format","Modal","show","onHide","Header","closeButton","Title","Body","Fragment","map","driver","driverName","Footer","Component","axios","post","restUrl","user","password","headers","catch","error","console","log","name","a","url","search","TokenId","InputData","GoogleApiWrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b05dbb07.chunk.js","sourcesContent":["import React, { Component, props } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow} from 'google-maps-react';\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from 'axios';\r\nimport { Button , FormControl, InputGroup, ListGroup, Alert} from 'react-bootstrap';\r\nimport * as appSettings from './AppSettings.json';\r\nimport Moment from 'moment';\r\nimport 'moment/locale/pt-br'\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nconst formStyles  ={\r\n  width: '50%',\r\n  height: '50%',\r\n  margin: '2% 0% 1% 10%'\r\n}\r\n\r\nconst headerStyles  ={\r\n  color: '#3399ff',\r\n  margin: '2% 0% 1% 32%'\r\n}\r\n\r\nconst mapStyles = {\r\n  width: '80%',\r\n  height: '60%',\r\n  top: '1%',\r\n  left: '10%',\r\n  border: '3px solid #3399ff'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);  \r\n    this.textInput = React.createRef(); \r\n    this.optionText = React.createRef();\r\n    this.toggleButtonState = this.toggleButtonState.bind(this);\r\n    this.state = {  posx : { result: -23.4991613},\r\n                    posy : { result: -46.8533796},\r\n                    placa : { result : \"\"},\r\n                    hour : { result : \"\"},\r\n                    address : \"\",\r\n                    selectedPlace: null,\r\n                    activeMarker: null,\r\n                    showingInfoWindow: true,\r\n                    showSearchName: true,\r\n                    isOpen: false,\r\n                    drivers: []\r\n                  }\r\n  }\r\n\r\n  toggleButtonState = () => {\r\n\r\n    if(this.optionText.current.value < 1){\r\n      alert('Selecione uma opção');\r\n      return;\r\n    }\r\n\r\n    if(this.textInput.current.value.trim() === ''){\r\n      alert('Insira uma informação para consulta');\r\n      this.textInput.current.value = '';\r\n      return;\r\n    }\r\n\r\n    this.doPositioning(this.optionText.current.value, this.textInput.current.value);\r\n  };  \r\n\r\n  displayDriver = (option, value) => {\r\n    this.doPositioning(option, value);\r\n    this.textInput.current.value = value;\r\n\r\n    this.handleClose();\r\n  }\r\n\r\n  doPositioning = (option, value) => {\r\n\r\n    const promisse = GetEndpoint.getPosition(option, value).then( response => {\r\n      if(response == null){\r\n        alert(\"Não foi possível realizar a pesquisa.\");\r\n        return;\r\n      }\r\n\r\n      if(response.success && response.data.length > 0){\r\n        fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + response.data[0].lat + ',' + response.data[0].long + '&key=' + appSettings.AppSettings.apiKey)\r\n          .then((response) => response.json())\r\n          .then((responseJson) => {\r\n            const address1 = responseJson.results[0].formatted_address;\r\n              this.setState({\r\n                posx : { result: response.data[0].lat},\r\n                posy : { result: response.data[0].long},\r\n                placa : { result: response.data[0].licencePlate},\r\n                hour: { result: response.data[0].rowReferenceTime},\r\n                address : { result: address1}\r\n              })\r\n      \r\n        })\r\n      }\r\n      else{\r\n        alert('Informação não encontrada!')\r\n      }\r\n    });\r\n  }\r\n\r\n  optionChange = () => {\r\n    this.optionText.current.value == 3 ? \r\n      this.setState({\r\n        showSearchName: false\r\n      })\r\n      :\r\n      this.setState({\r\n        showSearchName: true\r\n      });\r\n\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) => {\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n  };\r\n\r\n  handleClose = () => this.setState({\r\n    isOpen: false\r\n  });\r\n\r\n  handleShow = () => {\r\n    const promisse = GetEndpoint.getDrivers(this.textInput.current.value).then( response => {\r\n      if(response == null){\r\n        alert(\"Não foi possível realizar a pesquisa.\");\r\n        return;\r\n      }\r\n\r\n      if(response.success && response.data.length > 0){\r\n        this.setState({\r\n          isOpen: true,\r\n          drivers: response.data\r\n        });\r\n    \r\n      }\r\n      else{\r\n        alert('Informação não encontrada!')\r\n      }\r\n    });    \r\n  }\r\n\r\n  render() {\r\n    Moment.locale('pt-BR');\r\n\r\n    return (\r\n      <form>\r\n        <h2 style={headerStyles}>Connect Light - Visualizador de Frota</h2>\r\n\r\n        <div style={formStyles}>\r\n          <InputGroup className=\"mb-6\">\r\n            <div class=\"input-group\">\r\n              <div  style={{width: `200px`}}>\r\n              <select class=\"custom-select\" id=\"inputGroupSelect04\" ref={this.optionText} onChange={this.optionChange} >\r\n                <option value=\"0\" selected>Selecione a opção...</option>\r\n                <option value=\"1\">Placa do Veículo</option>\r\n                <option value=\"2\">Matrícula</option>\r\n                <option value=\"3\">Nome do Condutor</option>\r\n              </select>\r\n              </div>\r\n              <div class=\"input-group-append\" style={{width: `600px`}}>\r\n                <FormControl aria-describedby=\"basic-addon1\" ref={this.textInput} placeholder=\"Conteúdo para consulta\"/>\r\n                <Button onClick={this.handleShow} variant=\"info\" hidden={this.state.showSearchName} >Selecionar</Button>\r\n                <Button onClick={this.toggleButtonState} variant=\"primary\">Buscar</Button>\r\n              </div>\r\n            </div>\r\n          </InputGroup>\r\n        </div>\r\n\r\n        <div>\r\n          <Map\r\n            google={this.props.google}\r\n            zoom={15}\r\n            style={mapStyles}\r\n            initialCenter={{\r\n              lat: this.state.posx.result,\r\n              lng: this.state.posy.result}}\r\n            center={{\r\n                lat: this.state.posx.result,\r\n                lng: this.state.posy.result}}\r\n            >\r\n\r\n            <Marker position={{ lat: this.state.posx.result, lng: this.state.posy.result}} onClick={this.onMarkerClick}/>\r\n\r\n            <InfoWindow\r\n              marker={this.state.activeMarker}\r\n              visible={this.state.showingInfoWindow}>\r\n                <div>\r\n                  <h4>{this.state.placa.result}</h4>\r\n                  <h5>{this.state.address.result}</h5>\r\n                  <h6>Data da Última Comunicação: {Moment(this.state.hour.result).format('LLL') }</h6>\r\n                </div>\r\n\r\n            </InfoWindow>        \r\n          </Map>\r\n\r\n          <Modal show={this.state.isOpen} onHide={this.handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Condutore(s)</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div>\r\n                <React.Fragment>\r\n                  <ul className=\"list-group\">\r\n                    {this.state.drivers.map(driver => (\r\n                      <li className=\"list-group-item list-group-item-default\" onClick={() => this.displayDriver('3', driver.driverName)}>\r\n                        {driver.driverName} \r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </React.Fragment>              \r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                Fechar\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>       \r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass GetEndpoint extends Component {\r\n\r\n  static async getToken() { \r\n    let json = null;\r\n    \r\n    await axios.post(appSettings.AppSettings.restUrl + \"Token/Get\", {\r\n      user: appSettings.AppSettings.user,\r\n      password: appSettings.AppSettings.password,\r\n    }, \r\n    {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      }).then(response => {\r\n        json = response\r\n      }).catch(error => {\r\n        console.log(error.response);\r\n      try {\r\n        json = error.response;\r\n      } catch {\r\n        json = null\r\n      }\r\n    });\r\n    return json != null ? json.data : null;\r\n  };\r\n\r\n   static getDrivers = async (name) => {\r\n\r\n     let json = null;\r\n\r\n     let url = appSettings.AppSettings.restUrl + \"Position/GetDriversName\";\r\n\r\n     await axios.post(url + '?name=' + name,\r\n     {\r\n       headers: {\r\n         'Accept': 'application/json',\r\n         'Content-Type': 'application/json',\r\n       },\r\n       }).then(response => {\r\n         json = response;\r\n       }).catch(error => {\r\n         console.log(error.response);\r\n       try {\r\n         json = error.response;\r\n       } catch {\r\n        json = null\r\n       }\r\n     });\r\n     return json != null ? json.data : null;\r\n   };\r\n\r\n  static getPosition = async (option, search) => {\r\n\r\n    let json = null;\r\n\r\n    let url = \"\";\r\n\r\n    switch(option) {\r\n      case '1':\r\n        url =  appSettings.AppSettings.restUrl + \"Position/GetVehicleStatusLight\";\r\n        break;\r\n      case '2':\r\n        url =  appSettings.AppSettings.restUrl + \"Position/GetVehicleStatusByNationalId\";\r\n        break;\r\n      case '3':\r\n        url =  appSettings.AppSettings.restUrl + \"Position/GetVehicleStatusByDriverName\";\r\n        break;\r\n    }\r\n\r\n    // await fetch('https://connect-light.herokuapp.com/' + url, {\r\n    //   mode: 'cors',\r\n    //   method: 'OPTIONS',      \r\n    //   body: JSON.stringify({\r\n    //          TokenId: \"\",\r\n    //          InputData: [search],\r\n    //        }),\r\n    //   headers: {\r\n    //     'Accept': 'application/json, text/plain, */*',\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     'Access-Control-Allow-Headers': 'Cache-Control, Origin, Authorization, Content-Type, X-Requested-With',\r\n    //     'Access-Control-Allow-Methods': 'GET, PUT, POST, OPTIONS',\r\n    //     'Access-Control-Max-Age': '120',\r\n    //     'Origin': 'https://connect-light.herokuapp.com/'\r\n\r\n    //   }\r\n    // }).then((resp) => resp.json()) \r\n    // .then(function(data) {\r\n    //   alert('data: ' + data.results);\r\n    // });\r\n\r\n    await axios.post(url, {\r\n           TokenId: \"\",\r\n           InputData: [search],\r\n         },\r\n    {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      }).then(response => {\r\n        json = response;\r\n      }).catch(error => {\r\n        console.log(error.response);\r\n      try {\r\n        json = error.response;\r\n      } catch {\r\n       json = null\r\n      }\r\n    });\r\n    return json != null ? json.data : null;\r\n    \r\n\r\n  //   await axios( url, {\r\n  //     TokenId: \"\",\r\n  //     InputData: [search],\r\n  //   }, \r\n  //   {\r\n  //     headers: {\r\n  //       'Accept': 'application/json, text/plain, */*',\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       //'Access-Control-Allow-Headers': 'Cache-Control, Origin, Authorization, Content-Type, X-Requested-With',\r\n  //       //'Access-Control-Allow-Methods': 'POST',\r\n  //       //'Access-Control-Max-Age': '120',\r\n  //       //'Access-Control-Allow-Origin': '*',\r\n  //       //'Origin': 'http://localhost:3000/'\r\n  // },\r\n  //     //method: 'POST'\r\n  //     }).then(response => {\r\n  //       json = response;\r\n  //     }).catch(error => {\r\n  //       if (error.response) {\r\n  //         console.log(error.response);\r\n  //       }        \r\n  //       try {\r\n  //         json = error.response;\r\n  //       } catch {\r\n  //         json = null\r\n  //       }\r\n  //   });\r\n  //    return json != null ? json.data : null;\r\n   };\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: appSettings.AppSettings.apiKey\r\n})(MapContainer);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"," import 'bootstrap/dist/css/bootstrap.min.css';\r\n import React from 'react';\r\n import ReactDOM from 'react-dom';\r\n import './index.css';\r\n import Map from './App'\r\n import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Map />, document.getElementById('root'));\r\n\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA\r\n serviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}